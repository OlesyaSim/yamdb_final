name: cicd_test_deploy

on: [push]

jobs:
  tests:
    name: Pytest
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Pyton
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Setup dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./api_yamdb/requirements.txt
      - name: Pytest
        run: pytest

  push_to_hub:
    needs: tests
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: olesimka/sprint16:latest

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: ./api_yamdb
          file: ./api_yamdb/Dockerfile
          push: true
          tags: olesimka/sprint16:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    needs: push_to_hub

    steps:
      - name: Execute ssh commands
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo docker-compose stop
            sudo docker-compose rm web
            touch .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} > .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo DEBUG=1 >> .env
            sudo docker-compose up -d

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!

            

